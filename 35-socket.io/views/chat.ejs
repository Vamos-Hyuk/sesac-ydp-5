<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>socket.io 채팅</title>
    <!-- cdn -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
      .chat-box {
        display: flex;
        flex-direction: column;
        height: 400px;
        border: 3px solid rgb(255, 174, 0);
        background-color: rgb(243, 236, 173);
        padding: 10px;
        border-radius: 15px;
        margin-top: 5px;
      }
      .chat-list {
        overflow-y: auto;
        flex-grow: 1;
        margin-bottom: 10px;
        display: flex;
        flex-direction: column;
      }
      .my-chat,
      .other-chat {
        margin-bottom: 10px;
        padding: 5px;
        border-radius: 15px;
        border: 3px solid white;
        max-width: 50%;
      }
      .my-chat {
        background-color: rgb(255, 174, 0);
        text-align: right;
        align-self: flex-end; /* 오른쪽 정렬 */
        display: inline-block;
      }
      .other-chat {
        background-color: rgb(255, 174, 0);
        text-align: left;
        align-self: flex-start; /* 왼쪽 정렬 */
        display: inline-block;
      }
      .chat-form {
        display: flex;
        justify-content: center;
      }
      .chat-box input {
        padding: 10px;
        margin-right: 5px;
        flex-grow: 1;
        border-radius: 15px;
        border: 3px solid rgb(255, 174, 0);
      }
      .chat-box button {
        padding: 10px 15px;
        cursor: pointer;
        background-color: rgb(255, 174, 0);
        border-radius: 15px;
      }

      @media (max-width: 600px) {
        .chat-box {
          width: 100%;
        }
      }

      /* [실습3] 채팅창 입장 안내 문구 */
      .notice {
        text-align: center;
        color: rgb(63, 0, 0);
        font-size: 12px;
        margin-bottom: 5px;
      }

      .d-none {
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>My Chat</h1>
    <!-- 실습 1. 각 버튼 누를 때 만다 서버로 메세지 보내기 -->
    <!-- <button onclick="sayHello()">Hello</button>
    <button onclick="sayStudy()">Study</button>
    <button onclick="sayBye()">Bye</button>
    <p id="form-server"></p> -->

    <!-- [실습3] 닉네임 임력 폼 -->
    <div class="entry-box">
      <input
        type="text"
        id="nickname"
        placeholder="닉네임"
        autofocus
        onkeypress="if(window.event.keyCode==13){join()}"
      />
      <button type="button" onclick="join();">입장</button>
    </div>

    <!-- [실습2] -->
    <main class="chat-box d-none">
      <div class="chat-list">
        <!-- 임시 대화 데이터 -->
        <!-- <div class="my-chat">
          <img src="../public/myimg.jpeg" alt="myProfile" class="my-img" />
          <div>Me: 안녕?</div>
        </div>
        <div class="other-chat">
          <img src="../public/deimage.png" alt="profile" class="user-img" />
          <div>user2 : hi!!! 🙋🏻‍♂️</div>
        </div> -->
      </div>
      <div class="chat-form">
        <input
          type="text"
          id="message"
          onkeypress="if(window.event.keyCode==13){send()}"
        />
        <button type="button" onclick="send();">전송</button>
      </div>
    </main>

    <script>
      let socket = io.connect(); // 소켓 사용을 위한 객체 생성
      let myNick; // 내 닉네임

      socket.on('connect', () => {
        console.log('클라이언트 연결 완료 ::', socket.id);
      });

      // function sayHello() {
      //   socket.emit('hello', { who: 'client', msg: 'hello' });
      //   socket.on('helloKr', (data) => {
      //     console.log(data);
      //     document.querySelector(
      //       '#form-server'
      //     ).textContent = `${data.who} : ${data.msg}`;
      //   });
      // }

      // function sayStudy() {
      //   socket.emit('study', { who: 'client', msg: 'study' });
      //   socket.on('studyKr', (data) => {
      //     console.log(data);
      //     document.querySelector(
      //       '#form-server'
      //     ).textContent = `${data.who} : ${data.msg}`;
      //   });
      // }

      // function sayBye() {
      //   socket.emit('bye', { who: 'client', msg: 'bye' });
      //   socket.on('byeKr', (data) => {
      //     console.log(data);
      //     document.querySelector(
      //       '#form-server'
      //     ).textContent = `${data.who} : ${data.msg}`;
      //   });
      // }

      socket.on('notice', (msg) => {
        document
          .querySelector('.chat-list')
          .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);
      });
      // 채팅창 입장 문구
      function join() {
        socket.emit('setNick', document.querySelector('#nickname').value);
      }
      // [3-2] 채팅장 입장 문구 socket.io -> nickname
      // 닉네임 중복 alert 띄우기
      socket.on('error', (data) => {
        alert(data);
      });

      socket.on('entrySuccess', (nick) => {
        myNick = nick; // 내 닉네임 저장
        document.querySelector('#nickname').disabled = true; // 인풋 비활성화
        document.querySelector('.entry-box > button').disabled = true; // 버튼 비활성화
        document.querySelector('.chat-box').classList.remove('d-none'); // 채팅창 보이기
      });

      // 유저 목록 업데이트
      socket.on('updateNick', (nickObjs) => {
        let option = `<option value="all">전체</option>`;

        // todo: nickObjs 반복 돌아서 option 태크 추가
        // option 태그의 value 속성 값은 socket.id, option 태그의 컨텐츠는 nick 값
        for (let key in nickObjs) {
          options += `<option value="${key}">${nickObjs[key]}</option>}`;
        }

        // for (const [socketId, nick] of Object.entries(nickObjs)) {
        //   options += `<option value="${socketId}">${nick}</option>`;
        // }
        documents.querySelector('#nick-list').innerHTML = options;
      });
    </script>
  </body>
</html>
